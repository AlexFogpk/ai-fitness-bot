from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
import logging
import asyncio
import os
import firebase_admin
from firebase_admin import credentials, firestore
from openai import AsyncOpenAI

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# Firebase –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
firebase_credentials = os.getenv("FIREBASE_CREDENTIALS")
with open("firebase.json", "w") as f:
    f.write(firebase_credentials)

cred = credentials.Certificate('firebase.json')
firebase_admin.initialize_app(cred)
db = firestore.client()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GPT-4o mini
openai_client = AsyncOpenAI(api_key=OPENAI_API_KEY)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

logging.basicConfig(level=logging.INFO)

# ----------------------------------------------------------
# 1. –§—É–Ω–∫—Ü–∏—è —Ä–∞–∑–±–∏–≤–∫–∏ –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —á–∞—Å—Ç–∏
# ----------------------------------------------------------
def split_message(text, max_length=4096):
    """
    –†–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏, –∫–∞–∂–¥–∞—è –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç max_length —Å–∏–º–≤–æ–ª–æ–≤.
    –ï—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ, —Ä–∞–∑–±–∏–≤–∞–µ—Ç –ø–æ –ø–µ—Ä–µ–Ω–æ—Å–∞–º —Å—Ç—Ä–æ–∫–∏, —á—Ç–æ–±—ã –Ω–µ —Ä–≤–∞—Ç—å —Å–ª–æ–≤–æ.
    """
    parts = []
    while len(text) > max_length:
        split_index = text.rfind("\n", 0, max_length)
        if split_index == -1:
            split_index = max_length
        parts.append(text[:split_index])
        text = text[split_index:].strip()
    parts.append(text)
    return parts

# ----------------------------------------------------------
# 2. –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —á–∞—Å—Ç—è–º
# ----------------------------------------------------------
async def send_split_message(chat_id, text):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç, —Ä–∞–∑–±–∏–≤–∞—è –µ–≥–æ –Ω–∞ —á–∞—Å—Ç–∏,
    —á—Ç–æ–±—ã –∫–∞–∂–¥–∞—è —á–∞—Å—Ç—å –Ω–µ –ø—Ä–µ–≤—ã—à–∞–ª–∞ 4096 —Å–∏–º–≤–æ–ª–æ–≤.
    """
    parts = split_message(text, max_length=4096)
    for part in parts:
        await bot.send_message(chat_id, part)

# ----------------------------------------------------------
# 3. –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ –≤–æ–ø—Ä–æ—Å –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —Ñ–∏—Ç–Ω–µ—Å—É
# ----------------------------------------------------------
def is_fitness_question(text: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ,
    —Å–≤—è–∑–∞–Ω–Ω–æ–µ —Å —Ñ–∏—Ç–Ω–µ—Å–æ–º, –¥–∏–µ—Ç–æ–π, –ø–æ—Ö—É–¥–µ–Ω–∏–µ–º –∏–ª–∏ –∑–¥–æ—Ä–æ–≤—å–µ–º.
    """
    keywords = ["—Ñ–∏—Ç–Ω–µ—Å", "—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞", "–¥–∏–µ—Ç–∞", "–ø–∏—Ç–∞–Ω–∏–µ", "—É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è", "–ø–æ—Ö—É–¥–µ–Ω–∏–µ", "–∑–¥–æ—Ä–æ–≤—å–µ"]
    text_lower = text.lower()
    return any(keyword in text_lower for keyword in keywords)

# ----------------------------------------------------------
# 4. –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenAI (GPT-4o mini)
# ----------------------------------------------------------
async def ask_gpt(user_message: str) -> str:
    response = await openai_client.chat.completions.create(
        model="gpt-4o-mini",
        messages=[
            {
                "role": "system",
                "content": (
                    "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π AI-—Ç—Ä–µ–Ω–µ—Ä, –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–µ—à—å –ø–æ –ø–æ—Ö—É–¥–µ–Ω–∏—é, —Ñ–∏—Ç–Ω–µ—Å—É –∏ –ø–∏—Ç–∞–Ω–∏—é. "
                    "–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ, –∏ —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ñ–∏—Ç–Ω–µ—Å–æ–º, –¥–∏–µ—Ç–æ–π, –ø–æ—Ö—É–¥–µ–Ω–∏–µ–º –∏ –∑–¥–æ—Ä–æ–≤—å–µ–º. "
                    "–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –ø–æ —Ç–µ–º–µ, –æ—Ç–≤–µ—á–∞–π: '–ò–∑–≤–∏–Ω–∏, —è –º–æ–≥—É –æ—Ç–≤–µ—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ —Ñ–∏—Ç–Ω–µ—Å–µ –∏ –∑–¥–æ—Ä–æ–≤–æ–º –æ–±—Ä–∞–∑–µ –∂–∏–∑–Ω–∏.'"
                )
            },
            {"role": "user", "content": user_message}
        ],
        temperature=0.5,
        max_tokens=1000
    )
    return response.choices[0].message.content

# –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
@dp.message(CommandStart())
async def start(message: types.Message):
    user_id = str(message.from_user.id)
    user_ref = db.collection('users').document(user_id)
    user_ref.set({
        "name": message.from_user.full_name,
        "telegram_id": user_id,
        "subscription": "free",
    }, merge=True)
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! üëã –Ø —Ç–≤–æ–π AI-—Ç—Ä–µ–Ω–µ—Ä. "
        "–°–ø—Ä–æ—Å–∏ –º–µ–Ω—è –æ –ø–∏—Ç–∞–Ω–∏–∏, —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö –∏–ª–∏ –ø–æ—Ö—É–¥–µ–Ω–∏–∏!"
    )

# –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π —Ç–µ–º–∞—Ç–∏–∫–∏
@dp.message()
async def handle_message(message: types.Message):
    # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —Ñ–∏—Ç–Ω–µ—Å—É, –¥–∏–µ—Ç–µ, –ø–æ—Ö—É–¥–µ–Ω–∏—é –∏–ª–∏ –∑–¥–æ—Ä–æ–≤—å—é,
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —à–∞–±–ª–æ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –∏ –Ω–µ –æ–±—Ä–∞—â–∞–µ–º—Å—è –∫ OpenAI.
    if not is_fitness_question(message.text):
        await message.answer(
            "–ò–∑–≤–∏–Ω–∏, —è –º–æ–≥—É –æ—Ç–≤–µ—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ñ–∏—Ç–Ω–µ—Å–æ–º, –¥–∏–µ—Ç–æ–π, –ø–æ—Ö—É–¥–µ–Ω–∏–µ–º –∏ –∑–¥–æ—Ä–æ–≤—ã–º –æ–±—Ä–∞–∑–æ–º –∂–∏–∑–Ω–∏."
        )
        return

    await message.chat.do("typing")
    response = await ask_gpt(message.text)
    await send_split_message(message.chat.id, response)

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
