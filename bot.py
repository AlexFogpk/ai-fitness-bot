from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram.enums import ParseMode  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç ParseMode
import logging
import asyncio
import os
import re
import firebase_admin
from firebase_admin import credentials, firestore
from openai import AsyncOpenAI

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# Firebase –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
firebase_credentials = os.getenv("FIREBASE_CREDENTIALS")
with open("firebase.json", "w") as f:
    f.write(firebase_credentials)

cred = credentials.Certificate('firebase.json')
firebase_admin.initialize_app(cred)
db = firestore.client()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –∫–ª–∏–µ–Ω—Ç–∞ (GPT-4o-mini)
openai_client = AsyncOpenAI(api_key=OPENAI_API_KEY)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
logging.basicConfig(level=logging.INFO)

# ----------------------------------------------------------
# 1. –§—É–Ω–∫—Ü–∏—è —Ä–∞–∑–±–∏–≤–∫–∏ –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —á–∞—Å—Ç–∏ (–¥–ª—è Telegram –ª–∏–º–∏—Ç–∞ 4096 —Å–∏–º–≤–æ–ª–æ–≤)
# ----------------------------------------------------------
def split_message(text, max_length=4096):
    parts = []
    while len(text) > max_length:
        split_index = text.rfind("\n", 0, max_length)
        if split_index == -1:
            split_index = max_length
        parts.append(text[:split_index])
        text = text[split_index:].strip()
    parts.append(text)
    return parts

# ----------------------------------------------------------
# 2. –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —á–∞—Å—Ç—è–º —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Markdown
# ----------------------------------------------------------
async def send_split_message(chat_id, text, parse_mode=None):
    parts = split_message(text, max_length=4096)
    for part in parts:
        await bot.send_message(chat_id, part, parse_mode=parse_mode)

# ----------------------------------------------------------
# 3. –§—É–Ω–∫—Ü–∏—è –ø–æ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç–∫–∏ Markdown –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —à—Ä–∏—Ñ—Ç–∞ –≤ Telegram
# ----------------------------------------------------------
def fix_markdown_telegram(text: str) -> str:
    lines = text.split("\n")
    new_lines = []
    for line in lines:
        if line.startswith("### "):
            heading = line[4:].strip()
            line = f"**{heading}**"
        elif line.startswith("## "):
            heading = line[3:].strip()
            line = f"**{heading}**"
        new_lines.append(line)
    return "\n".join(new_lines)

# ----------------------------------------------------------
# 4. –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–º–∞—Ç–∏—á–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
# ----------------------------------------------------------
def is_topic_by_regex(text: str) -> bool:
    patterns = [
        # –§–∏—Ç–Ω–µ—Å, —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, —Ñ–∏–∑–∫—É–ª—å—Ç—É—Ä–∞
        r"\b—Ñ–∏—Ç–Ω–µ—Å\w*",
        r"\b—Ç—Ä–µ–Ω–∏—Ä–æ–≤\w*",
        r"\b—Ç—Ä–µ–Ω–∏—Ä\w*",
        r"\b—É–ø—Ä–∞–∂–Ω\w*",
        r"\b—Ñ–∏–∑–∫—É–ª—å—Ç\w*",
        r"\b—Å–ø–æ—Ä—Ç\w*",
        # –î–∏–µ—Ç–∞, –ø–∏—Ç–∞–Ω–∏–µ, –∑–¥–æ—Ä–æ–≤—å–µ
        r"\b–¥–∏–µ—Ç\w*",
        r"\b–ø–∏—Ç–∞–Ω\w*",
        r"\b–∫–∞–ª–æ—Ä\w*",
        r"\b–±–µ–ª–∫\w*",
        r"\b–∂–∏—Ä\w*",
        r"\b—É–≥–ª–µ–≤–æ–¥\w*",
        r"\b–ø—Ä–æ—Ç–µ–∏–Ω\w*",
        r"\b–ø–æ—Ö—É–¥\w*",
        r"\b–∑–¥–æ—Ä–æ–≤\w*",
        r"\b–º—ã—à—Ü\w*",
        r"\b–º–∞—Å—Å\w*",
        r"\b—Ä–∞—Ü–∏–æ–Ω\w*",
        r"\b–≤–∏—Ç–∞–º–∏–Ω\w*",
        r"\b–º–∏–Ω–µ—Ä–∞–ª\w*",
        r"\b–≥–∏–¥—Ä–∞—Ç\w*",
        r"\b—Å–æ–Ω\w*",
        r"\b–æ—Ç–¥—ã—Ö\w*",
        r"\b–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\w*",
        # –î–∏–µ—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∂–∏–º—ã
        r"\b–≤–µ–≥–∞–Ω\w*",
        r"\b–≤–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω\w*",
        r"\b–∫–µ—Ç–æ\w*",
        # –ö–∞—Ä–¥–∏–æ –∏ —Å–∏–ª–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        r"\b–∫–∞—Ä–¥–∏–æ\w*",
        r"\bhiit\b",
        r"\b—Å–∏–ª\w*",
        r"\b–ø—Ä–µ—Å—Å\w*",
        r"\b—è–≥–æ–¥–∏—Ü\w*",
        r"\b—Ä–∞—Å—Ç—è–∂–∫\w*",
        r"\b—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª\w*",
        # –°–ø–æ—Ä—Ç–∏–≤–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ –∏ –¥–æ–±–∞–≤–∫–∏
        r"\b—Å—É–ø–ª–µ–º–µ–Ω—Ç\w*",
        r"\b–¥–æ–±–∞–≤–∫\w*",
        r"\b–∞–Ω–∞–±–æ–ª\w*",
        r"\b–∂–∏—Ä–æ—Å–∂–∏–≥–∞–Ω\w*",
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
        r"\b–≥–∏–ø–µ—Ä—Ç—Ä–æ—Ñ\w*",
        r"\b–≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç\w*",
        r"\b–ø–ª–∏–æ–º–µ—Ç—Ä–∏–∫\w*",
        r"\b–¥–∏–Ω–∞–º–∏–∫\w*",
        r"\b—Å–∫–æ—Ä–æ—Å—Ç\w*",
        # –°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –∏ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è
        r"\b—Ñ—É—Ç–±–æ–ª\w*",
        r"\b–±–æ–∫—Å\w*",
        r"\b–±–µ–≥\w*",
        r"\b–≤–µ–ª–æ—Å–∏–ø–µ–¥\w*",
        r"\b–ø–ª–∞–≤–∞–Ω–∏\w*",
        r"\b–ª—ã–∂–∏\w*",
        r"\b—Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω\w*",
        r"\–±–∞—Ç–ª–µ—Ç\w*",
        r"\b—Å–ø–æ—Ä—Ç—Å–º–µ–Ω\w*",
        r"\b—ç–∫–∏–ø–∏—Ä–æ–≤–∫\w*",
        r"\b–∏–Ω–≤–µ–Ω—Ç–∞—Ä—å\w*",
        r"\b—Å–æ—Å—Ç—è–∑–∞–Ω–∏\w*",
        r"\b—Ç—É—Ä–Ω–∏—Ä\w*",
        r"\b—Ñ–∏–∑–∏—á–µ—Å–∫\w*"
    ]
    text_lower = text.lower()
    return any(re.search(pattern, text_lower) for pattern in patterns)

# ----------------------------------------------------------
# 5. –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–º–∞—Ç–∏—á–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ GPT (fallback)
# ----------------------------------------------------------
async def is_topic_by_gpt(text: str) -> bool:
    response = await openai_client.chat.completions.create(
        model="gpt-4o-mini",
        messages=[
            {
                "role": "system",
                "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ñ–∏—Ç–Ω–µ—Å—É, —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º, –∑–¥–æ—Ä–æ–≤—å—é –∏ –ø–∏—Ç–∞–Ω–∏—é. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'."
            },
            {
                "role": "user",
                "content": f"–û—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç –∫ —Ç–µ–º–µ —Ñ–∏—Ç–Ω–µ—Å–∞, —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º, –∑–¥–æ—Ä–æ–≤—å—é –∏–ª–∏ –ø–∏—Ç–∞–Ω–∏—é? –¢–µ–∫—Å—Ç: {text}"
            }
        ],
        temperature=0,
        max_tokens=10
    )
    answer = response.choices[0].message.content.strip().lower()
    return "–¥–∞" in answer

# ----------------------------------------------------------
# 6. –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–º–∞—Ç–∏—á–Ω–æ—Å—Ç–∏
# ----------------------------------------------------------
async def is_fitness_question_combined(text: str) -> bool:
    if is_topic_by_regex(text):
        return True
    else:
        return await is_topic_by_gpt(text)

# ----------------------------------------------------------
# 7. –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenAI (GPT-4o-mini)
# ----------------------------------------------------------
async def ask_gpt(user_message: str) -> str:
    response = await openai_client.chat.completions.create(
        model="gpt-4o-mini",
        messages=[
            {
                "role": "system",
                "content": (
                    "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π AI-—Ç—Ä–µ–Ω–µ—Ä, –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–µ—à—å –ø–æ —Ñ–∏—Ç–Ω–µ—Å—É, —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º, –∑–¥–æ—Ä–æ–≤—å—é –∏ –ø–∏—Ç–∞–Ω–∏—é. "
                    "–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É—è Markdown, —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å Telegram. "
                    "–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤–∏–¥–∞ '###'. –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç. "
                    "–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –ø–æ —Ç–µ–º–µ, –æ—Ç–≤–µ—á–∞–π: '–ò–∑–≤–∏–Ω–∏, —è –º–æ–≥—É –æ—Ç–≤–µ—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ —Ñ–∏—Ç–Ω–µ—Å–µ, —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö –∏ –∑–¥–æ—Ä–æ–≤–æ–º –æ–±—Ä–∞–∑–µ –∂–∏–∑–Ω–∏.'"
                )
            },
            {"role": "user", "content": user_message}
        ],
        temperature=0.5,
        max_tokens=1000
    )
    return response.choices[0].message.content

# ----------------------------------------------------------
# 8. –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
# ----------------------------------------------------------
@dp.message(CommandStart())
async def start(message: types.Message):
    user_id = str(message.from_user.id)
    user_ref = db.collection('users').document(user_id)
    user_ref.set({
        "name": message.from_user.full_name,
        "telegram_id": user_id,
        "subscription": "free",
    }, merge=True)
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! üëã\n\n"
        "–Ø —Ç–≤–æ–π AI-—Ç—Ä–µ–Ω–µ—Ä. –°–ø—Ä–æ—Å–∏ –º–µ–Ω—è –æ *–ø–∏—Ç–∞–Ω–∏–∏*, _—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö_, –ø–æ—Ö—É–¥–µ–Ω–∏–∏, –∑–¥–æ—Ä–æ–≤—å–µ –∏–ª–∏ —Å–ø–æ—Ä—Ç–µ!",
        parse_mode=ParseMode.MARKDOWN
    )

# ----------------------------------------------------------
# 9. –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π —Ç–µ–º–∞—Ç–∏–∫–∏
# ----------------------------------------------------------
@dp.message()
async def handle_message(message: types.Message):
    if not await is_fitness_question_combined(message.text):
        await message.answer(
            "–ò–∑–≤–∏–Ω–∏, —è –º–æ–≥—É –æ—Ç–≤–µ—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ñ–∏—Ç–Ω–µ—Å–æ–º, —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏, –¥–∏–µ—Ç–æ–π, –ø–æ—Ö—É–¥–µ–Ω–∏–µ–º, –∑–¥–æ—Ä–æ–≤—å–µ–º –∏ —Å–ø–æ—Ä—Ç–æ–º.",
            parse_mode=ParseMode.MARKDOWN
        )
        return
    await message.chat.do("typing")
    response = await ask_gpt(message.text)
    clean_response = fix_markdown_telegram(response)
    await send_split_message(message.chat.id, clean_response, parse_mode=ParseMode.MARKDOWN)

# ----------------------------------------------------------
# 10. –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# ----------------------------------------------------------
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
