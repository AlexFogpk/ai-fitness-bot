import logging
import asyncio
import os
import re
import difflib  # –¥–ª—è fuzzy matching

from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart, Command
from aiogram.enums import ParseMode
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton  # –∏–º–ø–æ—Ä—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

import firebase_admin
from firebase_admin import credentials, firestore

# –î–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenAI (gpt-4o-mini)
from openai import AsyncOpenAI

# =========================================
# 1. –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –æ–∫—Ä—É–∂–µ–Ω–∏—è
# =========================================
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# =========================================
# 2. Firebase –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
# =========================================
firebase_credentials = os.getenv("FIREBASE_CREDENTIALS")
if firebase_credentials:
    with open("firebase.json", "w") as f:
        f.write(firebase_credentials)
else:
    print("–í–Ω–∏–º–∞–Ω–∏–µ: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è FIREBASE_CREDENTIALS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")

cred = credentials.Certificate("firebase.json")
firebase_admin.initialize_app(cred)
db = firestore.client()

# =========================================
# 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI (GPT-4o-mini)
# =========================================
openai_client = AsyncOpenAI(api_key=OPENAI_API_KEY)

# =========================================
# 4. –£–¥–∞–ª–µ–Ω–æ: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è NLP-–º–æ–¥–µ–ª–∏ (rubert-tiny2) –∏ —Ñ—É–Ω–∫—Ü–∏—è nlp_is_fitness_topic
# =========================================

# =========================================
# 5. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ Dispatcher
# =========================================
logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()  # –•—Ä–∞–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ø–∞–º—è—Ç–∏
dp = Dispatcher(storage=storage)

# =========================================
# 6. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ Reply Keyboard –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
# =========================================

# –ì—Ä—É–ø–ø–∞ "–ü—Ä–æ–≥—Ä–µ—Å—Å –∏ –ø–∏—Ç–∞–Ω–∏–µ"
btn_my_progress = KeyboardButton(text="üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å")
btn_diary = KeyboardButton(text="üìí –î–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è")

# –ì—Ä—É–ø–ø–∞ "–†–∞—Å—á—ë—Ç—ã –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"
btn_calculate_kbju = KeyboardButton(text="üçΩ –ü–æ—Å—á–∏—Ç–∞—Ç—å –ö–ë–ñ–£")
btn_plans = KeyboardButton(text="üèãÔ∏è –ü–ª–∞–Ω—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫")

# –ì—Ä—É–ø–ø–∞ "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
btn_change_data = KeyboardButton(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
btn_change_goal = KeyboardButton(text="üéØ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–ª—å")

# –ì—Ä—É–ø–ø–∞ "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
btn_notifications = KeyboardButton(text="üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
btn_faq = KeyboardButton(text="‚ùì FAQ")

# –ì—Ä—É–ø–ø–∞ "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –¥–æ—Å—Ç—É–ø"
btn_support = KeyboardButton(text="üõ† –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞")
btn_subscription = KeyboardButton(text="üíé –ü–æ–¥–ø–∏—Å–∫–∞")

main_menu_kb = ReplyKeyboardMarkup(
    keyboard=[
        [btn_my_progress, btn_diary],
        [btn_calculate_kbju, btn_plans],
        [btn_change_data, btn_change_goal],
        [btn_notifications, btn_faq],
        [btn_support, btn_subscription],
    ],
    resize_keyboard=True
)

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
activity_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–°–∏–¥—è—á–∏–π (1.2)")],
        [KeyboardButton(text="–õ—ë–≥–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (1.375)")],
        [KeyboardButton(text="–°—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (1.55)")],
        [KeyboardButton(text="–í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (1.7)")],
        [KeyboardButton(text="–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è (1.9)")]
    ],
    resize_keyboard=True
)

# =========================================
# 7. –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ Markdown
# =========================================
def fix_markdown_telegram(text: str) -> str:
    lines = text.split("\n")
    new_lines = []
    for line in lines:
        if line.startswith("### "):
            heading = line[4:].strip()
            line = f"**{heading}**"
        elif line.startswith("## "):
            heading = line[3:].strip()
            line = f"**{heading}**"
        new_lines.append(line)
    return "\n".join(new_lines)

# =========================================
# 8. –§—É–Ω–∫—Ü–∏—è —Ä–∞–∑–±–∏–≤–∫–∏ –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
# =========================================
def split_message(text, max_length=4096):
    parts = []
    while len(text) > max_length:
        split_index = text.rfind("\n", 0, max_length)
        if split_index == -1:
            split_index = max_length
        parts.append(text[:split_index])
        text = text[split_index:].strip()
    parts.append(text)
    return parts

# =========================================
# 9. –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —á–∞—Å—Ç—è–º
# =========================================
async def send_split_message(chat_id, text, parse_mode=None):
    parts = split_message(text)
    for part in parts:
        await bot.send_message(chat_id, part, parse_mode=parse_mode)

# =========================================
# 10. Fuzzy matching –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π
# =========================================
GREETINGS = [
    "–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ", "–¥–æ–±—Ä—ã–π –¥–µ–Ω—å", "–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ", "—Ö–∞–π", "–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é",
    "–∑–¥–∞—Ä–æ–≤–∞", "—Å–∞–ª—é—Ç", "—Ö–µ–ª–ª–æ", "—Ö–µ–ª–æ—É", "—Ö–µ–π", "—Ö—ç–π", "–π–æ—É",
    "hello", "hi", "hey", "good morning", "good day"
]

def is_greeting_fuzzy(text: str) -> bool:
    text_lower = text.lower().strip()
    matches = difflib.get_close_matches(text_lower, GREETINGS, n=1, cutoff=0.8)
    return len(matches) > 0

# =========================================
# 11. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–µ–º–∞—Ç–∏–∫–∏ (—Ä–µ–≥—É–ª—è—Ä–∫–∏ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏)
# =========================================
def is_topic_by_regex(text: str) -> bool:
    patterns_fitness = [
        r"\b—Ñ–∏—Ç–Ω–µ—Å\w*", r"\b—Ç—Ä–µ–Ω–∏—Ä–æ–≤\w*", r"\b—Ç—Ä–µ–Ω–∏—Ä\w*", r"\b—É–ø—Ä–∞–∂–Ω\w*",
        r"\b—Ñ–∏–∑–∫—É–ª—å—Ç\w*", r"\b—Å–ø–æ—Ä—Ç\w*", r"\b—Å–∏–ª\w*", r"\b–ø—Ä–µ—Å—Å\w*",
        r"\b—è–≥–æ–¥–∏—Ü\w*", r"\b—Ä–∞—Å—Ç—è–∂–∫\w*", r"\b–≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç\w*"
    ]
    patterns_healthy_food = [
        r"\b–¥–∏–µ—Ç\w*", r"\b–ø–∏—Ç–∞–Ω\w*", r"\b–∫–∞–ª–æ—Ä\w*", r"\b–±–µ–ª–∫\w*",
        r"\b–æ–≤–æ—â\w*", r"\b—Ñ—Ä—É–∫—Ç\w*", r"\b–º–µ–Ω—é\w*", r"\b—Ä–µ—Ü–µ–ø—Ç\w*"
    ]
    patterns_unhealthy_food = [
        r"\b—á–∏–ø—Å\w*", r"\b—Å–Ω—ç–∫\w*", r"\b—Ñ–∞—Å—Ç—Ñ—É–¥\w*", r"\b–±—É—Ä–≥–µ—Ä\w*", r"\b–≥–∞–º–±—É—Ä–≥–µ—Ä\w*",
        r"\b—à–∞—É—Ä–º\w*", r"\b–¥–æ–Ω–µ—Ä\w*", r"\b–∫–∞—Ä—Ç–æ—Ñ–µ–ª[—å—å—è]\s?—Ñ—Ä–∏", r"\b—Ñ—Ä–∏\b",
        r"\b–º–∞–π–æ–Ω–µ–∑\w*", r"\b–∫–µ—Ç—á—É–ø\w*", r"\b—Å–æ—É—Å\w*", r"\b–Ω–∞–≥–≥–µ—Ç—Å\w*",
        r"\b–ø–∏—Ü—Ü\w*", r"\b—Ä–æ–ª–ª\w*", r"\b—Å—É—à–∏\w*", r"\b—Ö–æ—Ç–¥–æ–≥\w*",
        r"\b—Å—ç–Ω–¥–≤–∏—á\w*", r"\b–±—É—Ç–µ—Ä–±—Ä–æ–¥\w*", r"\b–¥–∂–∞–Ω–∫—Ñ—É–¥\w*", r"\bjunk food\b",
        r"\b–≥–∞–∑–∏—Ä–æ–≤\w*", r"\b–∫–æ–ª\w*", r"\b–ø–µ–ø—Å–∏\w*", r"\b—Å–ø—Ä–∞–π—Ç\w*",
        r"\b—ç–Ω–µ—Ä–≥–µ—Ç–∏–∫\w*", r"\b–∞–ª–∫–æ–≥–æ–ª\w*", r"\b–ø–∏–≤–æ\w*", r"\b–≤–∏–Ω–æ\w*", r"\b—Å–ø–∏—Ä—Ç–Ω\w*",
        r"\b—Å—É—Ö–∞—Ä\w*",
        r"\b—à–æ–∫–æ–ª–∞–¥\w*", r"\b–∫–æ–Ω—Ñ–µ—Ç\w*", r"\b—Ç–æ—Ä—Ç\w*", r"\b–ø–∏—Ä–æ–∂\w*", r"\b–≤—ã–ø–µ—á\w*",
        r"\b–º–∞–∫–∞—Ä–æ–Ω\w*", r"\b–ø–∞—Å—Ç–∞\w*", r"\b–±—É–ª–∫\w*", r"\b—Ö–ª–µ–±\w*", r"\b–±–∞—Ç–æ–Ω\w*"
    ]
    all_patterns = patterns_fitness + patterns_healthy_food + patterns_unhealthy_food
    text_lower = text.lower()
    return any(re.search(pattern, text_lower) for pattern in all_patterns)

def is_health_restriction_question(text: str) -> bool:
    patterns = [
        r"\b–Ω–µ –º–æ–≥—É\b", r"\b–∏–∑-–∑–∞\b", r"\b–±–æ–ª–∏—Ç\b", r"\b–±–æ–ª—å\b",
        r"\b–æ–≥—Ä–∞–Ω–∏—á–µ–Ω\b", r"\b–Ω–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏\b", r"\b–ø—Ä–æ–±–ª–µ–º—ã —Å–æ\b", r"\b—Å —Ç—Ä–∞–≤–º–æ–π\b"
    ]
    text_lower = text.lower()
    return any(re.search(pattern, text_lower) for pattern in patterns)

def is_in_whitelist(text: str) -> bool:
    whitelist = [
        "–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ", "–¥–æ–±—Ä—ã–π –¥–µ–Ω—å", "–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ", "—Ö–∞–π", "–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é",
        "–∫–∞–∫ –¥–µ–ª–∞", "—Å–ø–∞—Å–∏–±–æ",
        "—Ñ–∏—Ç–Ω–µ—Å", "—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞", "—É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è", "–±–µ–≥", "–∫–∞—Ä–¥–∏–æ", "—Å–∏–ª–æ–≤—ã–µ", "–ø–ª–∞–≤–∞–Ω–∏–µ",
        "–π–æ–≥–∞", "—Å—Ç—Ä–µ—Ç—á–∏–Ω–≥", "—Ñ–∏–∑–∫—É–ª—å—Ç—É—Ä–∞", "—Å–ø–æ—Ä—Ç", "–∑–¥–æ—Ä–æ–≤—å–µ", "–¥–∏–µ—Ç–∞", "–ø–∏—Ç–∞–Ω–∏–µ",
        "–º–æ—Ç–∏–≤–∞—Ü–∏—è", "–ø—Ä–æ–≥—Ä–µ—Å—Å", "—Ä–µ–∑—É–ª—å—Ç–∞—Ç", "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "–ø–ª–∞–Ω",
        "—Ñ–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", "—Ç—Ä–µ–Ω–∏—Ä", "–∫—Ä–æ—Å—Å—Ñ–∏—Ç", "—Å–∏–ª–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"
    ]
    text_lower = text.lower()
    return any(word in text_lower for word in whitelist)

def is_in_blacklist(text: str) -> bool:
    blacklist = [
        "–ø–æ–ª–∏—Ç–∏–∫–∞", "—Ñ–∏–Ω–∞–Ω—Å—ã", "—ç–∫–æ–Ω–æ–º–∏–∫–∞", "–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", "–±–∏–∑–Ω–µ—Å", "–∫–æ—Ä—Ä—É–ø—Ü–∏—è",
        "—Ä–∞—Å–∏–∑–º", "—Ä–µ–ª–∏–≥–∏—è", "–≤–æ–π–Ω–∞", "–∫–æ–Ω—Ñ–ª–∏–∫—Ç", "—Å–∫–∞–Ω–¥–∞–ª", "–Ω–æ–≤–æ—Å—Ç–∏", "–∑–∞–±–∞—Å—Ç–æ–≤–∫–∞",
        "–∫–∏–Ω–æ", "–∏–≥—Ä—ã", "—Å–µ–∫—Å", "—à–æ—É", "—Ç–µ–ª–µ–≤–∏–¥–µ–Ω–∏–µ", "–º–µ–º", "—é–º–æ—Ä",
        "–∫—Ä–µ–¥–∏—Ç", "–±–∞–Ω–∫–∏", "–∏–Ω—Ñ–ª—è—Ü–∏—è", "–∞–∫—Ü–∏–∏", "–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π", "—Ç—Ä–µ–π–¥–∏–Ω–≥"
    ]
    text_lower = text.lower()
    return any(word in text_lower for word in blacklist)

# =========================================
# 12. –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–º–∞—Ç–∏–∫–∏
# =========================================
async def is_fitness_question_combined(user_id: str, text: str) -> bool:
    if is_in_blacklist(text):
        return False
    if is_in_whitelist(text):
        return True
    if is_health_restriction_question(text):
        return True
    if is_topic_by_regex(text):
        return True
    # –£–¥–∞–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å –ø–æ–º–æ—â—å—é NLP-–º–æ–¥–µ–ª–∏
    return await is_topic_by_gpt(user_id, text)

# =========================================
# 13. GPT fallback –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–º–∞—Ç–∏–∫–∏
# =========================================
async def is_topic_by_gpt(user_id: str, text: str) -> bool:
    doc = db.collection("users").document(user_id).get()
    user_data = doc.to_dict() if doc.exists else {}
    history = user_data.get("history", [])
    history_context = "\n".join([f"{msg['role']}: {msg['text']}" for msg in history[-10:]])
    system_prompt = (
        "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ñ–∏—Ç–Ω–µ—Å—É, —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º, –∑–¥–æ—Ä–æ–≤—å—é –∏ –ø–∏—Ç–∞–Ω–∏—é. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'.\n"
        f"–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞:\n{history_context}\n\n"
        "–û—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç –∫ —Ç–µ–º–µ —Ñ–∏—Ç–Ω–µ—Å–∞, —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫, –∑–¥–æ—Ä–æ–≤—å—é –∏–ª–∏ –ø–∏—Ç–∞–Ω–∏—é?\n"
    )
    response = await openai_client.chat.completions.create(
        model="gpt-4o-mini",
        messages=[
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": text}
        ],
        temperature=0,
        max_tokens=10
    )
    answer = response.choices[0].message.content.strip().lower()
    return "–¥–∞" in answer

# =========================================
# 14. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –≤ Firestore
# =========================================
async def update_history(user_id: str, role: str, text: str):
    user_ref = db.collection("users").document(user_id)
    doc = user_ref.get()
    if doc.exists:
        data = doc.to_dict()
        history = data.get("history", [])
    else:
        history = []
    history.append({"role": role, "text": text})
    history = history[-5:]
    user_ref.update({"history": history})

# =========================================
# 15. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ GPT (—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º)
# =========================================
async def ask_gpt(user_id: str, user_message: str) -> str:
    doc = db.collection("users").document(user_id).get()
    user_data = doc.to_dict() if doc.exists else {}
    params = user_data.get("params", {})
    history = user_data.get("history", [])
    params_context = ""
    if params:
        params_context = (
            f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –ü–æ–ª: {params.get('–ø–æ–ª', 'N/A')}, "
            f"–í–µ—Å: {params.get('–≤–µ—Å', 'N/A')} –∫–≥, "
            f"–†–æ—Å—Ç: {params.get('—Ä–æ—Å—Ç', 'N/A')} —Å–º, "
            f"–í–æ–∑—Ä–∞—Å—Ç: {params.get('–≤–æ–∑—Ä–∞—Å—Ç', 'N/A')}, "
            f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è: {params.get('–∑–¥–æ—Ä–æ–≤—å–µ', 'N/A')}, "
            f"–¶–µ–ª—å: {params.get('—Ü–µ–ª—å', 'N/A')}."
        )
    history_context = ""
    if history:
        history_context = "\n".join([f"{msg['role']}: {msg['text']}" for msg in history[-10:]])
    system_message = (
        "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π AI-—Ç—Ä–µ–Ω–µ—Ä, –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–µ—à—å –ø–æ —Ñ–∏—Ç–Ω–µ—Å—É, –∑–¥–æ—Ä–æ–≤—å—é –∏ –ø–∏—Ç–∞–Ω–∏—é. "
        f"{params_context} "
        "–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–æ –≤—Ä–µ–¥–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã (—á–∏–ø—Å—ã, —Ñ–∞—Å—Ç—Ñ—É–¥, –∞–ª–∫–æ–≥–æ–ª—å –∏ —Ç.–¥.), "
        "–æ–±—ä—è—Å–Ω—è–π –≤–æ–∑–º–æ–∂–Ω—ã–π –≤—Ä–µ–¥, —É–∫–∞–∑—ã–≤–∞–π –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å, –¥–∞–≤–∞–π —Å–æ–≤–µ—Ç—ã –ø–æ —É–º–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–π –±–æ–ª–µ–µ –∑–¥–æ—Ä–æ–≤—ã–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã. "
        "–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–æ –∑–¥–æ—Ä–æ–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ, —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –±–∞–ª–∞–Ω—Å ‚Äî –ø–æ–º–æ–≥–∞–π. "
        "–ï—Å–ª–∏ –µ—Å—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –∑–¥–æ—Ä–æ–≤—å—é, –ø—Ä–µ–¥–ª–∞–≥–∞–π –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã. "
        "–û—Ç–≤–µ—á–∞–π –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É—è Markdown, —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å Telegram. "
        "–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤–∏–¥–∞ '###'; –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–π –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç. "
        "–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –ø–æ —Ç–µ–º–µ, –æ—Ç–≤–µ—á–∞–π: '–ò–∑–≤–∏–Ω–∏, —è –º–æ–≥—É –æ—Ç–≤–µ—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ —Ñ–∏—Ç–Ω–µ—Å–µ, —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö –∏ –∑–¥–æ—Ä–æ–≤–æ–º –æ–±—Ä–∞–∑–µ –∂–∏–∑–Ω–∏.'"
    )
    messages = []
    if history_context:
        messages.append({"role": "system", "content": system_message + "\n–ò—Å—Ç–æ—Ä–∏—è:\n" + history_context})
    else:
        messages.append({"role": "system", "content": system_message})
    messages.append({"role": "user", "content": user_message})
    response = await openai_client.chat.completions.create(
        model="gpt-4o-mini",
        messages=messages,
        temperature=0.5,
        max_tokens=1000
    )
    return response.choices[0].message.content

# =========================================
# 16. FSM –¥–ª—è —Å–±–æ—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–æ–Ω–±–æ—Ä–¥–∏–Ω–≥)
# =========================================
class Onboarding(StatesGroup):
    waiting_for_gender = State()
    waiting_for_weight = State()
    waiting_for_height = State()
    waiting_for_age = State()
    waiting_for_health = State()
    waiting_for_goal = State()
    waiting_for_activity = State()  # –Ω–æ–≤—ã–π —à–∞–≥ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

# =========================================
# 17. FSM –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–ª–∏ (–∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø—Ä–æ—Å)
# =========================================
class ChangeGoal(StatesGroup):
    waiting_for_new_goal = State()

# =========================================
# 18. –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π (fuzzy matching)
# =========================================
@dp.message(lambda msg: is_greeting_fuzzy(msg.text))
async def greet_user(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å –ø–æ —Ñ–∏—Ç–Ω–µ—Å—É, –ø–∏—Ç–∞–Ω–∏—é –∏ –∑–¥–æ—Ä–æ–≤–æ–º—É –æ–±—Ä–∞–∑—É –∂–∏–∑–Ω–∏?")

# =========================================
# 19. –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ —Å –ø–æ–∫–∞–∑–æ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
# =========================================
@dp.message(CommandStart())
async def start(message: types.Message, state: FSMContext):
    user_id = str(message.from_user.id)
    user_ref = db.collection("users").document(user_id)
    doc = user_ref.get()
    if not doc.exists or not doc.to_dict().get("params"):
        user_ref.set({
            "name": message.from_user.full_name,
            "telegram_id": user_id,
            "subscription": "free",
            "params": {}
        }, merge=True)
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã —è –º–æ–≥ –¥–∞–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –Ω—É–∂–Ω–æ –∑–∞–¥–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤.\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞, —É–∫–∞–∂–∏ —Å–≤–æ–π **–ø–æ–ª** (–Ω–∞–ø—Ä–∏–º–µ—Ä: –º—É–∂—á–∏–Ω–∞ –∏–ª–∏ –∂–µ–Ω—â–∏–Ω–∞).",
            parse_mode=ParseMode.MARKDOWN
        )
        await state.set_state(Onboarding.waiting_for_gender)
    else:
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –µ—Å—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
        await message.answer(
            "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —É–∂–µ –∑–∞–¥–∞–Ω—ã. –ú–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é:",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=main_menu_kb
        )

#########################
# 20. –õ–æ–≥–∏–∫–∞ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
#########################

# 20.1. –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ ‚Äì –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –æ–ø—Ä–æ—Å
@dp.message(lambda msg: msg.text == "üìù –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
async def handle_change_data(message: types.Message, state: FSMContext):
    await message.answer(
        "–•–æ—Ä–æ—à–æ! –î–∞–≤–∞–π –∑–∞–Ω–æ–≤–æ —É–∫–∞–∂–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞, —É–∫–∞–∂–∏ —Å–≤–æ–π **–ø–æ–ª** (–Ω–∞–ø—Ä–∏–º–µ—Ä: –º—É–∂—á–∏–Ω–∞ –∏–ª–∏ –∂–µ–Ω—â–∏–Ω–∞).",
        parse_mode=ParseMode.MARKDOWN
    )
    await state.set_state(Onboarding.waiting_for_gender)

# 20.2. –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–ª—å ‚Äì –∑–∞–ø—É—Å–∫ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ FSM –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–π —Ü–µ–ª–∏
@dp.message(lambda msg: msg.text == "üéØ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–ª—å")
async def handle_change_goal_button(message: types.Message, state: FSMContext):
    await message.answer("–û–∫–µ–π! –í–≤–µ–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–æ–≤—É—é —Ü–µ–ª—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ø–æ—Ö—É–¥–µ–Ω–∏–µ, –Ω–∞–±–æ—Ä –º–∞—Å—Å—ã –∏ —Ç.–¥.)")
    await state.set_state(ChangeGoal.waiting_for_new_goal)

@dp.message(ChangeGoal.waiting_for_new_goal)
async def process_new_goal(message: types.Message, state: FSMContext):
    new_goal = message.text.strip()
    user_id = str(message.from_user.id)
    db.collection("users").document(user_id).update({"params.—Ü–µ–ª—å": new_goal})
    await message.answer(f"–¶–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞: *{new_goal}*", parse_mode=ParseMode.MARKDOWN)
    await state.clear()

# 20.3. –ü–æ—Å—á–∏—Ç–∞—Ç—å –ö–ë–ñ–£ ‚Äì —Ä–∞—Å—á–µ—Ç –∫–∞–ª–æ—Ä–∏–π –∏ –º–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤ —Å —É—á—ë—Ç–æ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ —Ü–µ–ª–∏
@dp.message(lambda msg: msg.text == "üçΩ –ü–æ—Å—á–∏—Ç–∞—Ç—å –ö–ë–ñ–£")
async def handle_calculate_kbju(message: types.Message):
    user_id = str(message.from_user.id)
    doc = db.collection("users").document(user_id).get()
    user_data = doc.to_dict() if doc.exists else {}

    if not user_data or "params" not in user_data:
        await message.answer(
            "–ß—Ç–æ–±—ã —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –ö–ë–ñ–£, –º–Ω–µ –Ω—É–∂–Ω—ã —Ç–≤–æ–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–π –∏—Ö —Å –ø–æ–º–æ—â—å—é /start –∏–ª–∏ 'üìù –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ'."
        )
        return

    params = user_data["params"]
    gender = params.get("–ø–æ–ª", "").lower()
    try:
        weight = float(params.get("–≤–µ—Å", 0))
        height = float(params.get("—Ä–æ—Å—Ç", 0))
        age = float(params.get("–≤–æ–∑—Ä–∞—Å—Ç", 0))
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏ —Å–≤–æ–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —á–µ—Ä–µ–∑ 'üìù –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ'.")
        return

    if not (weight > 0 and height > 0 and age > 0 and (gender in ["–º—É–∂—á–∏–Ω–∞", "–∂–µ–Ω—â–∏–Ω–∞"])):
        await message.answer("–ü–æ—Ö–æ–∂–µ, —Ç–≤–æ–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ–ø–æ–ª–Ω—ã–µ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π 'üìù –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ'.")
        return

    activity_factor = float(params.get("–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", 1.375))
    # –†–∞—Å—á–µ—Ç BMR –ø–æ —Ñ–æ—Ä–º—É–ª–µ –ú–∏—Ñ—Ñ–ª–∏–Ω–∞ ‚Äì –°–∞–Ω –ñ–µ–æ—Ä–∞
    if gender == "–º—É–∂—á–∏–Ω–∞":
        bmr = 9.99 * weight + 6.25 * height - 4.92 * age + 5
    else:
        bmr = 9.99 * weight + 6.25 * height - 4.92 * age - 161

    tdee = bmr * activity_factor

    # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ TDEE –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ü–µ–ª–∏
    goal_lower = params.get("—Ü–µ–ª—å", "").lower()
    if "–ø–æ—Ö—É–¥" in goal_lower:
        factor_goal = 0.85  # –≤—ã—á–µ—Å—Ç—å –ø—Ä–∏–º–µ—Ä–Ω–æ 15%
        protein_factor = 1.8
    elif "–Ω–∞–±–æ—Ä" in goal_lower:
        factor_goal = 1.15  # –ø—Ä–∏–±–∞–≤–∏—Ç—å –ø—Ä–∏–º–µ—Ä–Ω–æ 15%
        protein_factor = 1.5
    else:
        factor_goal = 1.0
        protein_factor = 1.5

    tdee_adjusted = tdee * factor_goal

    # –†–∞—Å—á–µ—Ç –º–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤:
    protein_g = protein_factor * weight
    fat_g = 1.0 * weight
    cals_from_protein = protein_g * 4
    cals_from_fat = fat_g * 9
    carbs_cals = tdee_adjusted - (cals_from_protein + cals_from_fat)
    carbs_g = carbs_cals / 4 if carbs_cals > 0 else 0

    response_text = (
        f"–¢–≤–æ–∏ —Ä–∞—Å—á—ë—Ç–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ):\n\n"
        f"–°—É—Ç–æ—á–Ω–∞—è –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ –∫–∞–ª–æ—Ä–∏—è—Ö: ~{int(tdee_adjusted)} –∫–∫–∞–ª\n\n"
        f"–ë–µ–ª–∫–∏: {int(protein_g)} –≥/–¥–µ–Ω—å\n"
        f"–ñ–∏—Ä—ã: {int(fat_g)} –≥/–¥–µ–Ω—å\n"
        f"–£–≥–ª–µ–≤–æ–¥—ã: {int(carbs_g)} –≥/–¥–µ–Ω—å\n\n"
        f"–£—á—Ç–∏, —á—Ç–æ —ç—Ç–æ –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç, —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å —É—á—ë—Ç–æ–º —Ç–≤–æ–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ —Ü–µ–ª–∏ ({params.get('—Ü–µ–ª—å', 'N/A')})."
    )
    await message.answer(response_text)

#########################
# 21. –°–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ—à–∞–≥–æ–≤–æ (–æ–Ω–±–æ—Ä–¥–∏–Ω–≥)
#########################
@dp.message(Onboarding.waiting_for_gender)
async def process_gender(message: types.Message, state: FSMContext):
    gender = message.text.strip()
    await state.update_data(gender=gender)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ —Å–≤–æ–π **–≤–µ—Å** (–∫–≥).", parse_mode=ParseMode.MARKDOWN)
    await state.set_state(Onboarding.waiting_for_weight)

@dp.message(Onboarding.waiting_for_weight)
async def process_weight(message: types.Message, state: FSMContext):
    weight = message.text.strip()
    await state.update_data(weight=weight)
    await message.answer("–ü—Ä–∏–Ω—è—Ç–æ. –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ —Å–≤–æ–π **—Ä–æ—Å—Ç** (—Å–º).", parse_mode=ParseMode.MARKDOWN)
    await state.set_state(Onboarding.waiting_for_height)

@dp.message(Onboarding.waiting_for_height)
async def process_height(message: types.Message, state: FSMContext):
    height = message.text.strip()
    await state.update_data(height=height)
    await message.answer("–ü–æ–Ω—è–ª. –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ —Å–≤–æ–π **–≤–æ–∑—Ä–∞—Å—Ç** (–ª–µ—Ç).", parse_mode=ParseMode.MARKDOWN)
    await state.set_state(Onboarding.waiting_for_age)

@dp.message(Onboarding.waiting_for_age)
async def process_age(message: types.Message, state: FSMContext):
    age = message.text.strip()
    await state.update_data(age=age)
    await message.answer(
        "–ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è –∫–∞–∫–∏–µ-—Ç–æ **–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –∑–¥–æ—Ä–æ–≤—å—é**?\n"
        "(–ù–∞–ø—Ä–∏–º–µ—Ä, ¬´–Ω–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π¬ª –∏–ª–∏ ¬´–±–æ–ª–∏—Ç –∫–æ–ª–µ–Ω–æ¬ª)",
        parse_mode=ParseMode.MARKDOWN
    )
    await state.set_state(Onboarding.waiting_for_health)

@dp.message(Onboarding.waiting_for_health)
async def process_health(message: types.Message, state: FSMContext):
    health = message.text.strip()
    await state.update_data(health=health)
    await message.answer("–ò –Ω–∞–∫–æ–Ω–µ—Ü, –∫–∞–∫–∞—è —É —Ç–µ–±—è **—Ü–µ–ª—å**? (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ø–æ—Ö—É–¥–µ–Ω–∏–µ, –Ω–∞–±–æ—Ä –º–∞—Å—Å—ã –∏ —Ç.–¥.)", parse_mode=ParseMode.MARKDOWN)
    await state.set_state(Onboarding.waiting_for_goal)

# –ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ —Ü–µ–ª–∏ –ø—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
@dp.message(Onboarding.waiting_for_goal)
async def process_goal(message: types.Message, state: FSMContext):
    goal = message.text.strip()
    await state.update_data(goal=goal)
    await message.answer(
        "–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:",
        reply_markup=activity_kb,
        parse_mode=ParseMode.MARKDOWN
    )
    await state.set_state(Onboarding.waiting_for_activity)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
@dp.message(Onboarding.waiting_for_activity)
async def process_activity(message: types.Message, state: FSMContext):
    activity_text = message.text.strip()
    match = re.search(r"\(([\d\.]+)\)", activity_text)
    if match:
        activity_factor = float(match.group(1))
    else:
        activity_factor = 1.2
    await state.update_data(activity=activity_factor)
    data = await state.get_data()
    user_id = str(message.from_user.id)
    params = {
        "–ø–æ–ª": data.get("gender"),
        "–≤–µ—Å": data.get("weight"),
        "—Ä–æ—Å—Ç": data.get("height"),
        "–≤–æ–∑—Ä–∞—Å—Ç": data.get("age"),
        "–∑–¥–æ—Ä–æ–≤—å–µ": data.get("health"),
        "—Ü–µ–ª—å": data.get("goal"),
        "–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å": activity_factor
    }
    db.collection("users").document(user_id).update({"params": params})
    await message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –Ø –∑–∞–ø–∏—Å–∞–ª —Ç–≤–æ–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n"
        f"‚Ä¢ –ü–æ–ª: {data.get('gender')}\n"
        f"‚Ä¢ –í–µ—Å: {data.get('weight')}\n"
        f"‚Ä¢ –†–æ—Å—Ç: {data.get('height')}\n"
        f"‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç: {data.get('age')}\n"
        f"‚Ä¢ –ó–¥–æ—Ä–æ–≤—å–µ: {data.get('health')}\n"
        f"‚Ä¢ –¶–µ–ª—å: {data.get('goal')}\n"
        f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {activity_factor}\n\n"
        "–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ —Ñ–∏—Ç–Ω–µ—Å—É, –ø–∏—Ç–∞–Ω–∏—é –∏ —Ç.–¥.!",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=main_menu_kb
    )
    await state.clear()

# =========================================
# 22. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–ª–∏ —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤—É—é —Ñ—Ä–∞–∑—É (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç)
# =========================================
@dp.message(lambda msg: "–ø–æ–º–µ–Ω—è–π –º–æ—é —Ü–µ–ª—å" in msg.text.lower() or "–∏–∑–º–µ–Ω–∏ –º–æ—é —Ü–µ–ª—å" in msg.text.lower())
async def update_goal(message: types.Message):
    text_lower = message.text.lower()
    if "–Ω–∞" in text_lower:
        new_goal = message.text.split("–Ω–∞", 1)[1].strip()
        if new_goal:
            user_id = str(message.from_user.id)
            db.collection("users").document(user_id).update({"params.—Ü–µ–ª—å": new_goal})
            await message.answer(f"–¶–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞: *{new_goal}*", parse_mode=ParseMode.MARKDOWN)
            return
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –Ω–æ–≤—É—é —Ü–µ–ª—å –ø–æ—Å–ª–µ —Ñ—Ä–∞–∑—ã '–ø–æ–º–µ–Ω—è–π –º–æ—é —Ü–µ–ª—å –Ω–∞'.", parse_mode=ParseMode.MARKDOWN)

# =========================================
# 23. –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π (–æ–±—â–∏–π fallback)
# =========================================
@dp.message(lambda msg: not ("–ø–æ–º–µ–Ω—è–π –º–æ—é —Ü–µ–ª—å" in msg.text.lower() or "–∏–∑–º–µ–Ω–∏ –º–æ—é —Ü–µ–ª—å" in msg.text.lower()))
async def handle_message(message: types.Message):
    user_id = str(message.from_user.id)
    doc = db.collection("users").document(user_id).get()
    user_data = doc.to_dict() if doc.exists else {}
    params = user_data.get("params", {})
    if not params:
        await message.answer(
            "–ß—Ç–æ–±—ã —è –º–æ–≥ –¥–∞–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã:\n"
            "–ø–æ–ª, –≤–µ—Å, —Ä–æ—Å—Ç, –≤–æ–∑—Ä–∞—Å—Ç, —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è, —Ü–µ–ª—å\n\n"
            "–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ—à–∞–≥–æ–≤—ã–π –æ–ø—Ä–æ—Å.",
            parse_mode=ParseMode.MARKDOWN
        )
        return
    if not await is_fitness_question_combined(user_id, message.text):
        await message.answer(
            "–ü—Ä–æ—Å—Ç–∏, –Ω–æ —è –Ω–µ —Å–º–æ–≥—É –ø–æ–º–æ—á—å —Å —ç—Ç–∏–º –≤–æ–ø—Ä–æ—Å–æ–º.\n\n"
            "–Ø —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ —Ñ–∏—Ç–Ω–µ—Å–µ, —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö, –ø–∏—Ç–∞–Ω–∏–∏ –∏ –∑–¥–æ—Ä–æ–≤–æ–º –æ–±—Ä–∞–∑–µ –∂–∏–∑–Ω–∏.",
            parse_mode=ParseMode.MARKDOWN
        )
        return
    await message.chat.do("typing")
    response = await ask_gpt(user_id, message.text)
    clean_response = fix_markdown_telegram(response)
    await send_split_message(message.chat.id, clean_response, parse_mode=ParseMode.MARKDOWN)
    await update_history(user_id, "user", message.text)
    await update_history(user_id, "bot", response)

# =========================================
# 24. –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
# =========================================
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
